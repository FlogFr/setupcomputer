#------------------------------------------
# bash_log 
bash_log ()
{
    if [[ "$#" != 2 ]]; then
        echo "we should have 2 argument to the bash_log function"
    else
        RM_COLOR='\033[0m'
        case $1 in
        "KO")
            COLOR='\033[31m'
            ;;
        "WARN")
            COLOR='\033[33m'
            ;;
        "OK")
            COLOR='\033[32m'
            ;;
        *)
            echo "this is not a normal log level"
            return 1
            ;;
        esac

        echo -e "$2 ${COLOR}[$1]${RM_COLOR}"
        return 0
    fi
}

#------------------------------------------
# Go function go to specific path
go ()
{
    if [[ -n "$1" ]];then
        dirTo=`grep "^$1" ~/.gorc | cut -d ":" -f 2`
        if [[ -n "$dirTo" ]];then
            eval builtin cd ` echo -E "$dirTo" `
        else
            eval builtin cd "'"` echo -E "$1" `"'"
        fi
    else
        eval builtin cd ~
    fi
    eval ls
}

#------------------------------------------
# findname
findname ()
{
    if [[ -n "$1" ]];then
        find / -type f -name "*$1*" 2>&-
    else
        builtin echo "Cmd syntax : $0 <name_file_to_search>"
    fi
}

# parse to get the current branch
function git-branch-name {
	git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3
}
function git-branch-prompt {
	local branch=`git-branch-name`
	if [ $branch ]; then printf " [%s]" $branch; fi
}

# mkdircd
mkdircd ()
{
    if [[ -n "$1" ]];then
        mkdir "$1"; builtin cd "!:1";
    else
        builtin echo "Cmd syntax: $0 <dir to create>"
    fi
}

#------------------------------------------
# reload bashrc
reload_bashrc ()
{
    . ~/.bashrc
}

#------------------------------------------
# aspectRatio: print all the aspect ratio
# possible for the ration done
aspectRatio ()
{
    if [[ -n "$1" ]]; then
        for i in `seq 1 1000 `; do awk "BEGIN {print $1/$i, $2/$i}"; done |grep -v "\.";
    else
        echo "The syntax of the function is aspectRatio  width  height, or aspectRatio  height  width";
    fi
}

#------------------------------------------
# cdl: cd and ls
cdl ()
{
	builtin cd $1 && ls -la
}

#------------------------------------------
# edit the makefile if it exists
makefile ()
{
    if [ -f ./Makefile ]; then
        vim ./Makefile
        return 0
    fi
    if [ -f ./MAKEFILE ]; then
        vim ./MAKEFILE
        return 0
    fi
    if [ -f ./makefile ]; then
        vim ./makefile
        return 0
    fi
    echo "[Error] No Makefile to edit"
}

#------------------------------------------
# edit the readme if it exists
readme ()
{
    if [ -f ./README ]; then
        less ./README
        return 0
    fi
    if [ -f ./readme ]; then
        less ./readme
        return 0
    fi
    if [ -f ./readme.txt ]; then
        less ./readme.txt
        return 0
    fi
    if [ -f ./readme.txt ]; then
        less ./readme.txt
        return 0
    fi
    echo "[Error] No readme file"
}

#------------------------------------------
# psgrep: get a procsesus name
psgrep ()
{
    if [[ -n "$1" ]]; then
        ps fauxwww --headers | grep $1
    else
        echo "psgrep take one argument (the processus to search)";
    fi
}

#------------------------------------------
# makeloop: make in loop
makeloop ()
{
    while true; do
        make;
        sleep 1;
    done
}

#------------------------------------------
# editrcfile
editconfigurationfile ()
{
    if [[ $# != 1 ]]; then
        bash_log "KO" "editrcfile takes only one argument"
        return 1
    fi

    FILE="${HOME}/.$1rc"
    vim ${FILE}
}

#------------------------------------------
# rm know host
rmknownhost ()
{
    if [[ $# != 1 ]]; then
        bash_log "KO" "rmknowhost takes only one parameter: line to delete"
        return 1
    fi

    sed -i "${1}d" ~/.ssh/known_hosts
}


#------------------------------------------
# generate_password
generate_password ()
{
    date +%s | sha256sum | base64 | head -c 32 ; echo
}


#------------------------------------------
# version (get version package)
version ()
{
    dpkg -l | grep $1
}


#------------------------------------------
# parse and output error line for vim
# example:
# input: tests/repository/test_memrepo.py:50:
# output: +50 tests/repository/test_memrepo.py
vim_parse_error_line ()
{
    file=$(echo $1 | cut -d: -f1)
    line=$(echo $1 | cut -d: -f2)
    echo "+$line $file"
}

vim_error ()
{
    vim_file_line=$(vim_parse_error_line $1)
    IFS=' ' read -r -a arguments <<< "$vim_file_line"
    vim ${arguments[0]} ${arguments[1]}
}
